# releases staging artifacts to the staging environment
name: deploy to staging

on:
  push:
    branches:
      - staging

permissions:
  contents: write # needed to write releases
  id-token: write # needed for keyless signing
  packages: write # needed for ghcr access

env:
  KUBERNETES_VERSION: 1.26.0
  HELM_CHART_PATH: charts/api-gateway
  DOCKER_IMAGE: docker.io/feelguuds/api-gateway
  GHCR_REGISTRY: ghcr.io/solomonaiengineering
  K8S_VERSION: '1.28.0'
  HELM_VERSION: '3.8.1'
  GO_VERSION: '1.21.x'

jobs:
  publish-artifacts:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            release_suffix: ubuntu
          - os: macos-latest
            release_suffix: mac
          - os: windows-latest
            release_suffix: windows
        platform: [linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: fluxcd/flux2/action@main
      - uses: sigstore/cosign-installer@main
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version:  ${{ env.GO_VERSION }}
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version:${{ env.HELM_VERSION }}
      - name: Setup kubeconform
        uses: ./.github/actions/kubeconform
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v${{ env.KUBERNETES_VERSION }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Prepare
        id: prep
        run: |
          HELM_VERSION=$(grep 'VERSION' pkg/version/version.go | awk '{ print $4 }' | tr -d '"')
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "REVISION=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "HELM_VERSION=${HELM_VERSION}" >> $GITHUB_OUTPUT
      - name: Generate images meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            docker.io/feelguuds/api-gateway
          tags: |
            type=raw,value=staging
      - name:  Publish multi-arch image
        uses: docker/build-push-action@v3
        with:
          push: true
          sbom: true
          provenance: true
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          build-args: |
            REVISION=${{ steps.prep.outputs.REVISION }}
          platforms: ${{matrix.operating-system}}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Validate Service Helm Chart
        run: |
          helm lint ./charts/api-gateway
          helm template ./charts/api-gateway --set linkerd.profile.enabled=false --set autoscaling.enabled=false | kubeconform -strict -summary -kubernetes-version ${{ env.KUBERNETES_VERSION }}
      - name: Debug failure
        if: failure()
        run: |
          kubectl logs -l app=api-gateway || true

  deploy:
    needs: [publish-artifacts]
    runs-on: ubuntu-latest
    env:
      working-directory: .
      staging-cluster: a176c72f-9962-4b7a-92ee-7a69fa260c53
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Update SHA
        run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/sha/_meta
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      - name: Deploy To Staging Environment
        working-directory: ${{env.working-directory}}
        run: |
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{env.staging-cluster}}
          ./deploy/deploy.sh -n platform
name: release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write # needed to write releases
  id-token: write # needed for keyless signing
  packages: write # needed for ghcr access

jobs:
  publish-artifacts:
    strategy:
      matrix:
        helm-version:
          - 3.8.1
        operating-system: [linux/amd64] #, linux/arm/v8
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Get Release Version
        run: |
          export RELEASE_VERSION=${GITHUB_REF#refs/*/}
          echo RELEASE_VERSION: ${RELEASE_VERSION}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
      - name: Get Github Branch Name
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          echo GIT_BRANCH: ${GIT_BRANCH}
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: sigstore/cosign-installer@main
      - uses: fluxcd/flux2/action@main
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.x
      - name: Setup Helm
        uses: ./.github/actions/helm
        with:
          version: 3.8.1
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Prepare
        id: prep
        run: |
          HELM_VERSION=$(grep 'version:' ./charts/api-gateway/Chart.yaml | tail -n1 | awk '{ print $2}')
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "REVISION=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "HELM_VERSION=${HELM_VERSION}" >> $GITHUB_OUTPUT
      - name: Validate Service Helm Chart
        id: validation
        uses: elifesciences/helm-validator-action@master
        with:
          chartPath: 'charts/api-gateway'
          kubernetesVersion: '1.28.0'
      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: charts
          charts_url: https://charts.melodiy.io
          owner: SolomonAIEngineering
          repository: backend-api-gateway
          branch: gh-pages
      - name: Publish Helm chart to GHCR
        run: |
          helm package charts/api-gateway
          helm push api-gateway-${{ steps.prep.outputs.HELM_VERSION }}.tgz oci://ghcr.io/solomonaiengineering/charts
          rm api-gateway-${{ steps.prep.outputs.HELM_VERSION }}.tgz
        continue-on-error: true
      - name: Publish Flux OCI artifact to GHCR
        run: |
          flux push artifact oci://ghcr.io/solomonaiengineering/manifests/api-gateway:${{ steps.prep.outputs.HELM_VERSION }} \
            --path="./kustomize" \
            --source="${{ github.event.repository.html_url }}" \
            --revision="${GITHUB_REF_NAME}/${GITHUB_SHA}"
          flux tag artifact oci://ghcr.io/solomonaiengineering/manifests/api-gateway:${{ steps.prep.outputs.HELM_VERSION }} --tag latest
        continue-on-error: true
      - name: Publish config artifact
        run: |
          flux push artifact oci://ghcr.io/solomonaiengineering/api-gateway-deploy:${{ steps.prep.outputs.HELM_VERSION }} \
            --path="./kustomize" \
            --source="${{ github.event.repository.html_url }}" \
            --revision="${GITHUB_REF_NAME}/${GITHUB_SHA}"
          flux tag artifact oci://ghcr.io/solomonaiengineering/api-gateway-deploy:${{ steps.prep.outputs.HELM_VERSION }} --tag latest
        continue-on-error: true
      - name: Generate images meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            docker.io/feelguuds/api-gateway
          tags: |
            type=raw,value=${{ steps.prep.outputs.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      - name: Publish Multi-Arch Image Authentication Service
        uses: docker/build-push-action@v3
        with:
          sbom: true
          provenance: true
          push: ${{ github.event_name != 'pull_request' }}
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: ${{matrix.operating-system}}
          build-args: |
            REVISION=${{ steps.prep.outputs.REVISION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Debug failure
        if: failure()
        run: |
          kubectl logs -l app=api-gateway || true

  deploy:
    needs: [publish-artifacts]
    runs-on: ubuntu-latest
    env:
      working-directory: .
      production-cluster: 8f6d9b0a-c838-442b-b6ef-bf710718930e
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Update SHA
        run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/sha/_meta
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      - name: Deploy To Production Environment
        working-directory: ${{env.working-directory}}
        run: |
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{env.production-cluster}}
          kustomize build ./kustomize/overlays/production | kubectl apply -f - --namespace=platform
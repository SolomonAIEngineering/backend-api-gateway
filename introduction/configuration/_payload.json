[{"data":1,"prerenderedAt":145},["Reactive",2],{"search-api":3},[4,11,21,29,37,45,68,78,87,105,129,138],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     Solomon AI API Gateway Built Off Of KrakenD   Write pages in   Markdown , use   Vue  components and enjoy the power of   Nuxt .      +50 Components  ready to build rich pages   Docs  and   Page  layouts  Start from a   README , scale to a framework documentation  Navigation and Table of Contents generation  Fully configurable design system  Leverages    Typography  and    Elements  Used on   Content Documentation      What's included      Nuxt Architecture   Harness the full power of   Nuxt 3  and its   modules  ecosystem.    Nuxt Studio ready   Edit your theme content and appearance with live-preview within   Nuxt Studio .    Vue Components   Use built-in components (or your own!) inside your content.    Write Markdown   Enjoy the ease and simplicity of Markdown and discover   MDC syntax .    Deploy anywhere   Zero config on   Vercel  or   Netlify . Choose between static generation, on-demand rendering (Node) or edge-side rendering on   CloudFlare workers .    Extensible.   Customize the whole design, or add components using slots - you can make Docus your own.",{"id":12,"path":13,"dir":14,"title":15,"description":16,"keywords":17,"body":20},"content:1.introduction:1.getting-started.md","/introduction/getting-started","introduction","Getting Started","From your Markdown files to a deployed website in few minutes.",[18,19],"Play online","Create a new project","  Getting Started  From your Markdown files to a deployed website in few minutes.  Play online  You can start playing with Docus in your browser using Stackblitz:  Play on StackBlitz  Create a new project   Start a fresh Docus project with:     npx   nuxi@latest   init   docs   -t   themes/docus\n   Install the dependencies in the   docs  folder:      npm   install\n     yarn   install\n     pnpm   install   --shamefully-hoist\n   Run the   dev  command to start Docus in development mode:      npm   run   dev\n     yarn   dev\n     pnpm   run   dev\n   ✨ Well done! A browser window should automatically open for   http://localhost:3000  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":22,"path":23,"dir":14,"title":24,"description":25,"keywords":26,"body":28},"content:1.introduction:2.project-structure.md","/introduction/project-structure","Project Structure","Docus is a Nuxt theme that provides a ready-to-use documentation website, if you are familiar with Nuxt, you will feel right at home.",[27],"Directory Structure","  Project Structure  Docus is a Nuxt theme that provides a ready-to-use documentation website, if you are familiar with Nuxt, you will feel right at home.  Directory Structure  This is the minimal directory structure to get an up and running Docus website.     content/\n     index.md\n   app.config.ts\n   nuxt.config.ts\n  The   content/  directory is where you   write Markdown pages .  The   app.config.ts  is where you   configure Docus  to fit your branding and design.  The   nuxt.config.ts  is your   Nuxt configuration .  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":30,"path":31,"dir":14,"title":32,"description":33,"keywords":34,"body":36},"content:1.introduction:3.writing-pages.md","/introduction/writing-pages","Writing Pages","Docus is made to let you write all your content in Markdown and Vue components with the MDC syntax.",[35],"Frontmatter","  Writing Pages  Docus is made to let you write all your content in Markdown and Vue components with the MDC syntax.  Each Markdown pages in the   content/  folder will be mapped to a route.     File  Generated route     index.md   /    about.md   /about    blog/index.md   /blog    blog/hello.md   /blog/hello    1.guide/2.installation   /guide/installation  Frontmatter  Docus supports multiple Front-matter attributes for pages.     ---\n   title  :   \"Get Started\"\n   description  :   \"Let's learn how to use my amazing module.\"\n   ---\n      Key   Type   Default   Description     layout   string   default  Use any layout name like you would in   definePageMeta()    title   string   Defines the page title and H1 in docs pages    description   string   Defines the page description and excerpt in docs pages    redirect   string   A route path to redirect    image   object   OpenGraph cover image    Docs layout options       aside   boolean   Toggles the visibility of aside navigation    toc   boolean   Toggles the visibility of table of contents    header   boolean   Toggles the visibility of the page header    bottom   boolean   Toggles the visibility of page bottom section    Navigation options       navigation   boolean   Toggles the visibility of the page or directory in navigation    navigation.title   string   Changes the name of the page or directory in navigation    navigation.icon   string   Changes the icon of the page or directory in navigation  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":38,"path":39,"dir":14,"title":40,"description":41,"keywords":42,"body":44},"content:1.introduction:4.configuration.md","/introduction/configuration","Configuration","Learn how to configure Docus.",[43],"Customizing the logo","  Configuration  Learn how to configure Docus.      export   default   defineAppConfig  ({\n     docus: {\n       title:   'Docus'  ,\n       description:   'My Docus Project'  ,\n       url:   'http://docus.dev'\n     }\n   })\n     export   default   defineAppConfig  ({\n     docus: {\n       title:   'Docus'  ,\n       description:   'My Docus Project'  ,\n       url:   'http://docus.dev'  ,\n       image:   '/social-card-preview.png'  ,\n       socials: {\n         twitter:   '@nuxt_js'  ,\n         github:   'nuxt-themes/docus'  ,\n       },\n       github: {\n         root:   'content'  ,\n         edit:   true  ,\n         contributors:   false\n       },\n       layout:   'default'  ,\n       aside: {\n         level:   1  ,\n         filter: [],\n       },\n       header: {\n         title:   false  ,\n         logo:   true  ,\n         showLinkIcon:   false\n       },\n       footer: {\n         credits: {\n           icon:   'IconDocus'  ,\n           text:   'Powered by Docus'  ,\n           href:   'https://docus.dev'  ,\n         },\n         textLinks: [\n           {\n             text:   'Nuxt'  ,\n             href:   'https://nuxt.com'  ,\n             target:   '_blank'  ,\n             rel:   'noopener'\n           }\n         ],\n         iconLinks: [\n           {\n             label:   'NuxtJS'  ,\n             href:   'https://nuxtjs.org'  ,\n             component:   'IconNuxtLabs'  ,\n           },\n           {\n             label:   'Vue Telescope'  ,\n             href:   'https://vuetelescope.com'  ,\n             component:   'IconVueTelescope'  ,\n           },\n         ],\n       }\n     }\n   })\n      Key   Type   Default   Description     title   string  Docus  Website title    titleTemplate   string  Docus  Website title template    description   string  My Docus Project  Website description    url   string   Website URL    layout   string  default  Fallback layout to use (supports   default  or   page )    Socials       socials   object   {}  Social links    socials.github   string   The repository to use on GitHub links    socials.twitter   string   The account to use on Twitter links    socials.youtube   string   The channel to use on Youtube links    socials.instagram   string   The account to use on Instagram links    socials.facebook   string   The account to use on Facebook links    socials.medium   string   The account to use on Medium links    socials.[social]   object   Override social or display custom one    socials.[social].label   string   A label to use for the social    socials.[social].icon   string   A icon to use for the social    socials.[social].href   string   A link to use for the social    socials.[social].rel   string   noopener noreferrer  A space-separated list of   link types    Header       header   object   Header configuration    header.logo   boolean   Whether or not to use   Logo.vue  as the header logo    header.title   string   If set to a string, will be used in the header    header.showLinkIcon   boolean   If set to   true  links icons will show in the header    header.exclude   string[]   An array of path to exclude out from the header navigation    header.fluid   boolean   true  Make header   Container  fluid    Main       main   object   Main configuration    main.fluid   boolean   true  Make main content   Container  fluid    main.padded   boolean   true  Make main content   Container  padded    Aside       aside   object   Aside configuration    aside.level   string  0  Aside base level of nesting    aside.collapsed   boolean   Will be used as default value for collapsible navigation categories    aside.exclude   string[]   An array of path to exclude out from the aside navigation    Footer       footer   object   Footer configuration    footer.credits   object   An object defining the bottom left credits    footer.credits.icon   object   The icon to use for the credits    footer.credits.text   object   The text to use for the credits    footer.textLinks   array   []  An array of texts to display at the center of footer    footer.textLinks[0].text   string   The text to display    footer.textLinks[0].href   string   A link to use for the text    footer.textLinks[0].target   string   _self  Where to display the linked URL, as the name for a browsing context    footer.textLinks[0].rel   string   noopener noreferrer  A space-separated list of   link types    footer.iconLinks   array   []  An array of icons to display in the footer    footer.iconLinks[0].label   string   A label to use for the icon    footer.iconLinks[0].href   string   A link to use for the icon    footer.iconLinks[0].icon   string   The icon to use (can be a component name)    footer.iconLinks[0].rel   string   noopener noreferrer  A space-separated list of   link types    footer.fluid   boolean   true  Make footer   Container  fluid    GitHub       github   object   false  GitHub integration configuration    github.dir   string   Directory containing the files to be edited    github.branch   string   Branch to start editing    github.repo   string   Name of the GitHub repo to edit files    github.owner   string   Owner of the repo    github.edit   boolean   Toggle \"Edit this page on Github\" component on documentation pages    Search       fuse   object   useFuse   options  Customizing the logo  To update the logo in the header, create a component in   components/Logo.vue  with your own logo.  In this example, the image is located at   /public/img .     \u003C  template  >\n     \u003C  img   width  =  \"120\"   src  =  \"/img/YOURLOGO.png\"  />\n   \u003C/  template  >\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":46,"path":47,"dir":48,"title":49,"description":50,"keywords":51,"body":67},"content:2.api:1.components.md","/api/components","api","Components","Discover every component you can use in your content.",[52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"\u003CAlert />","\u003CBadge />","\u003CBlockHero />","\u003CButtonLink />","\u003CCallout />","\u003CCard />","\u003CCardGrid />","\u003CCodeGroup />","\u003CCodeBlock />","\u003CCopyButton />","\u003CIcon />","\u003CList />","\u003CSandbox />","\u003CTerminal />","\u003CVideoPlayer />","  Components  Discover every component you can use in your content.   \u003CAlert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     \u003CBadge />   \u003CBadge />  support same types as   \u003CAlert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     \u003CBlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub →\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     \u003CButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     \u003CCallout />   \u003CCallout />  support same types as   \u003CAlert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     \u003CCard />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     \u003CCardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     \u003CCodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus\n     npm   install   docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add   docus\n     ```\n     ```bash [NPM]\n     npm   install   docus\n     ```\n   ::\n     \u003CCodeBlock />  To be used inside a   \u003CCodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `\u003CCodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     \u003CCopyButton />        :copy-button{content=\"hey!\"}\n     \u003CIcon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     \u003CList />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    \u003CSandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     \u003CTerminal />        :terminal{content=\"nuxi build\"}\n     \u003CVideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":69,"path":70,"dir":48,"title":71,"description":72,"keywords":73,"body":77},"content:2.api:2.composables.md","/api/composables","Composables","Discover the Docus composables to use in your custom Vue components and pages.",[74,75,76],"useDocus()","useMenu()","useScrollspy()","  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()    useDocus  ()  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     \u003C  script   setup  >\n   const   {   config   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  div  >\n       \u003C  h1  >{{ config.title }}\u003C/  h1  >\n       \u003C  p  >{{ config.description }}\u003C/  p  >\n     \u003C/  div  >\n   \u003C/  template  >\n    tree  refers to the current navigation tree that is displayed in the   aside  component.     \u003C  script   setup  >\n   const   {   tree   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  DocsAsideTree   :links  =  \"tree\"   />\n   \u003C/  template  >\n    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {\n     // Is menu visible\n     visible  ,\n     // Close menu function\n     close  ,\n     // Open menu function\n     open  ,\n     // Toggle menu function\n     toggle\n   }   =   useMenu  ()\n    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {\n     // Headings on the page\n     visibleHeadings  ,\n     // Active headings (for the current page)\n     activeHeadings  ,\n     // Update headings (an array of DOM nodes)\n     updateHeadings\n   }   =   useScrollspy  ()\n   html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":79,"path":80,"dir":48,"title":81,"description":82,"keywords":83,"body":86},"content:2.api:3.layouts.md","/api/layouts","Layouts","Docus provides multiple built-in layouts for displaying your Markdown pages.",[84,85],"default","page","  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---\n   aside  :   true\n   bottom  :   true\n   toc  :   false\n   ---\n   \n   Your awesome content\n  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---\n   title  :   Home\n   layout  :   page\n   fluid  :   true\n   ---\n  Check   Home page  as live sample of page layout  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":88,"path":89,"dir":90,"title":91,"description":92,"keywords":93,"body":104},"content:3.engineering:helm-chart-definition.md","/engineering/helm-chart-definition","engineering","headless-authentication-service","Headless Authentication Service Helm chart for Kubernetes",[94,95,96,97,98,99,100,101,102,103],"TL;DR","Maintainers","Service Background","Introduction","Installing the Chart","Uninstalling the Chart","Values","Troubleshooting","Upgrading","License","  headless-authentication-service  Headless Authentication Service Helm chart for Kubernetes  TL;DR     $ helm repo add simfinii https://github.com/SimifiniiCTO/simfinii\n   $ helm install my-release simfinii/headless-authentication-service\n  Maintainers     Name  Email  Url    yoan yomba   yoan@simfinii.com                               ,-.\n ,     ,-.   ,-.\n/ \\   (   )-(   )\n\\ |  ,.>-(   )-\u003C\n \\|,' (   )-(   )\n  Y ___`-'   `-'\n  |/__/   `-'\n  |\n  |\n  |    SIMFINY PLATFORM - This platform is attempting to revolutionize the finacial gamification as well\n  |                        as the social experience users consumers by both enabling them to better reach their\n  |                        target goals as well as allowing such consumers to share ideas and progress in communities\n__|_____________\n  Service Background  Authentication is an extremely important aspect of an any platform due in part to the fact that data protection\nat the user level must be enforced as well as access level permissions. Authentication however,\nin a distributed system provides more complexities. In monolithic applications, authentication and\nauthorization can be performed via sessions. However, in a distributed system, since multiple instances\nof a service can be deployed at one time, enforcing user requests to the originating\nsession instance (sticky sessions) isn’t viable and introduces a ton of operational overhead.  With this in mind, we at the simifinii aim to implement our authorization scheme via 2 sets of services\nvia json web tokens (JWT). We also make use of a distributed cache for session storage which ensures\nthat we don’t need to maintain stickiness across instances of a server. The authentication framework\ndeveloped by us consists of 2 service instances. One is a stateful instance which utilizes the\nopen-sourced keratin-authn microservice and interfaces with either a postgres or mysql database.\nThe second instance is a headless authentication service which is stateless and serves as an interface\nthrough which the keratin-authn service can be interacted with  Introduction  This chart bootstraps the headless authentication service deployment on a Kubernetes cluster using the Helm package manager.  This chart can be used with Kubeapps for deployment and management of Helm Charts in clusters. This Helm chart has been tested on top of a Kubernetes Runtime.   Kubernetes 1.19+  Helm 3.2.0+  PV provisioner support in the underlying infrastructure  Installing the Chart  To install the chart with the release name   my-release :     $ helm repo add simfinii https://github.com/SimifiniiCTO/simfinii\n   $ helm install my-release simfinii/headless-authentication-service\n  These commands deploy the headless authentication service on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation.    Tip : List all releases using   helm list  Uninstalling the Chart  To uninstall/delete the   my-release  deployment:     $ helm delete my-release\n  The command removes all the Kubernetes components associated with the chart and deletes the release.  Values     Key  Type  Default  Description    affinity  object   {}    authService.domains  string   \"localhost\"    authService.enableAuthIntegration  string   \"true\"    authService.externalPort  string   \"3000\"    authService.host  string   \"authentication-service\"    authService.internalPort  string   \"8000\"    authService.issuerURI  string   \"http://localhost\"    authService.origin  string   \"http://localhost\"    authService.password  string   \"simifinii\"    authService.publicURI  string   \"http://localhost\"    authService.username  string   \"simifinii\"    autoscaling.behavior.scaleDown.percent  int   100    autoscaling.behavior.scaleDown.periodSeconds  int   15    autoscaling.behavior.scaleDown.stabilizationWindowSeconds  int   300    autoscaling.behavior.scaleUp.percent  int   100    autoscaling.behavior.scaleUp.periodSeconds  int   15    autoscaling.behavior.scaleUp.stabilizationWindowSeconds  int   0    autoscaling.cpu  int   90    autoscaling.enabled  bool   true    autoscaling.maxReplicas  int   10    autoscaling.memory  int   90    autoscaling.minReplicas  int   1    aws.config.id  string   \"AKIA2EPOPXDPD3Z2NOUY\"    aws.config.profile  string   \"solomon-ai-engineering\"    aws.config.secret  string   \"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\"    aws.consumer.backoffDuration  string   \"2s\"    aws.consumer.batchSize  int   1000    aws.consumer.concurrencyFactor  int   10    aws.consumer.messageTimeout  string   \"1m\"    aws.consumer.pollingDuration  string   \"10s\"    aws.consumer.waitTimeInSeconds  int   20    aws.queue.config.endpoint  string   \"https://sqs.us-east-1.amazonaws.com/696821725406\"    aws.queue.config.maxMessagesRead  int   10    aws.queue.config.readAttributes  0  string   \"All\"    aws.queue.config.readTimeoutSec  string   \"5s\"    aws.queue.config.region  string   \"us-east-1\"    aws.queue.config.writeTimeoutSec  string   \"5s\"    aws.queue.deadLetterQueueUrl  string   \"https://sqs.us-east-1.amazonaws.com/696821725406/authentication-service-account-deletion-staging-dl\"    aws.queue.queueUrl  string   \"https://sqs.us-east-1.amazonaws.com/696821725406/authentication-service-account-deletion-staging\"    backend  string   nil    backends  list   []    cache  string   \"\"    certificate.create  bool   false    certificate.dnsNames  0  string   \"headless-authentication-service\"    certificate.duration  string   \"24h\"    certificate.ipAddresses  object   {}    certificate.issuerRef.kind  string   \"ClusterIssuer\"    certificate.issuerRef.name  string   \"self-signed\"    certificate.key.algorithm  string   \"rsa\"    certificate.key.rotationPolicy  string   \"Never\"    certificate.key.size  string   \"2048\"    certificate.namespace  string   \"\"    certificate.renewBefore  string   \"12h\"    certificate.usages  0  string   \"server auth\"    certificate.usages  1  string   \"client auth\"    deploymentStrategy.maxSurge  string   \"25%\"    deploymentStrategy.maxUnavailable  string   \"25%\"    deploymentStrategy.type  string   \"RollingUpdate\"    dnsPolicy  string   \"ClusterFirst\"    failures.failurethreshold  int   5    failures.initialDelaySeconds  int   30    failures.periodSeconds  int   30    failures.successThresholds  int   1    failures.timeoutSeconds  int   10    faults.delay  bool   false    faults.error  bool   false    faults.testFail  bool   false    faults.testTimeout  bool   false    faults.unhealthy  bool   false    faults.unready  bool   false    fullnameOverride  string   \"\"    h2c.enabled  bool   false    host  string   nil    image.pullPolicy  string   \"IfNotPresent\"    image.repository  string   \"feelguuds/headless-authentication-service\"    image.tag  string   \"2.0.2\"    imagePullSecrets  list   []    ingress.annotations  object   {}    ingress.className  string   \"\"    ingress.enabled  bool   false    ingress.hosts  0 .host  string   \"headless-authentication-service.local\"    ingress.hosts  0 .paths  0 .path  string   \"/\"    ingress.hosts  0 .paths  0 .pathType  string   \"ImplementationSpecific\"    ingress.tls  0 .hosts  0  string   \"headless-authentication-service.local\"    ingress.tls  0 .secretName  string   \"headless-authentication-service-tls\"    integrationTests.enabled  bool   false    linkerd.annotations.\"linkerd.io/inject\"  string   \"enabled\"    linkerd.annotations.\"prometheus.io/path\"  string   \"/metrics\"    linkerd.annotations.\"prometheus.io/port\"  string   \"4191\\\"\"    linkerd.annotations.\"prometheus.io/scrape\"  string   \"true\"    linkerd.profile.enabled  bool   false    logLevel  string   \"info\"    nameOverride  string   \"headless-authentication-service\"    nodeSelector  object   {}    podAnnotations.service  string   \"feelguuds/headless-authentication-service\"    podSecurityContext  object   {}    probes.liveliness.failurethreshold  int   3    probes.liveliness.initialDelaySeconds  int   0    probes.liveliness.periodSeconds  int   30    probes.liveliness.timeoutSeconds  int   1    probes.readiness.successThresholds  int   3    progressDeadlineInSeconds  int   600    redis.enabled  bool   false    redis.repository  string   \"redis\"    redis.tag  string   \"6.0.8\"    replicaCount  int   3    resources.limits.memory  string   \"256Mi\"    resources.requests.cpu  string   \"100m\"    resources.requests.memory  string   \"64Mi\"    restartPolicy  string   \"Always\"    revisionHistoryLimit  int   3    schedulerName  string   \"default-scheduler\"    securityContext  object   {}    service.annotations  object   {}    service.enabled  bool   true    service.env.backendServiceUrls  string   \"\"    service.env.certPath  string   \"/data/cert\"    service.env.configFile  string   \"config.yaml\"    service.env.configPath  string   \"/config\"    service.env.dataLoadedInMemoryForStressTestInMB  string   \"0\"    service.env.dataPath  string   \"/data\"    service.env.downstreamServiceConnectionLimit  string   \"8\"    service.env.enableCpuStressTest  string   \"false\"    service.env.enableH2c  string   \"false\"    service.env.enableMemoryStressTest  string   \"false\"    service.env.enableRandomDelay  string   \"false\"    service.env.enableRandomError  string   \"false\"    service.env.enableVersionFromFile  string   \"true\"    service.env.metricConnectionAddress  string   \"http://jaeger-collector:14268/api/traces\"    service.env.numStressCpus  string   \"0\"    service.env.randomDelayMax  string   \"75\"    service.env.randomDelayMin  string   \"25\"    service.env.randomDelayUnit  string   \"ms\"    service.env.setServiceHealthy  string   \"false\"    service.env.setServiceUnhealthy  string   \"false\"    service.env.uiColor  string   \"\"    service.env.uiLogo  string   \"#34577c\"    service.env.uiMessage  string   \"headless-authentication-service\"    service.env.uiPath  string   \"./ui\"    service.externalPort  int   9897    service.grpcPort  int   9796    service.hostPort  string   nil    service.http.clientTimeoutInMinutes  string   \"2m\"    service.http.maxRetries  string   \"5\"    service.http.maxRetryWaitTimeInMs  string   \"400ms\"    service.http.minRetryWatiTimeInMs  string   \"200ms\"    service.http.requestTimeoutInMs  string   \"2000ms\"    service.http.serverShutdownTimeoutInSeconds  string   \"5s\"    service.http.serverTimeoutInSeconds  string   \"30s\"    service.httpPort  int   9897    service.logLevel  string   \"info\"    service.metricsPort  int   9899    service.name  string   \"headless-authentication-service\"    service.nodePort  int   31198    service.rpc.rpcDeadlineInMs  string   \"500ms\"    service.rpc.rpcRetries  string   \"3\"    service.rpc.rpcRetryBackoffInMs  string   \"20ms\"    service.rpc.rpcRetryTimeoutInMs  string   \"100ms\"    service.telemetry.apiKey  string   \"px-api-96674db8-6d46-482f-92af-f48b416a9032\"    service.telemetry.deployKey  string   \"px-dep-47a828ae-259d-4ce6-a143-3f28ac7fa090\"    service.telemetry.enabled  bool   true    service.telemetry.licence  string   \"NRJS-289e4caff97051d3722\"    service.type  string   \"ClusterIP\"    serviceAccount.annotations.melodiy/service  string   \"headless-authentication-service\"    serviceAccount.create  bool   true    serviceAccount.enabled  bool   true    serviceAccount.imagePullSecrets  object   {}    serviceAccount.name  string   \"\"    serviceAccount.namespace  string   \"\"    serviceMonitor.additionalLabels.function  string   \"service-monitoring\"    serviceMonitor.additionalLabels.service  string   \"headless-authentication-service\"    serviceMonitor.enabled  bool   false    serviceMonitor.honorLabels  bool   true    serviceMonitor.interval  string   \"30s\"    serviceMonitor.namespace  string   \"monitoring\"    serviceMonitor.path  string   \"/metrics\"    serviceMonitor.port  string   \"http\"    serviceMonitor.scrapeTimeout  string   \"10s\"    terminationGracePeriodSeconds  int   30    tls.certPath  string   \"/data/cert\"    tls.enabled  bool   false    tls.hostPort  string   nil    tls.port  int   9898    tls.secretName  string   nil    tolerations  list   []    ui.color  string   \"#34577c\"    ui.logo  string   \"\"    ui.message  string   \"\"   Specify each parameter using the   --set key=value[,key=value]  argument to   helm install . For example,     $ helm install my-release \\\n     --set image.repository=keratin/authn-server \\\n       simfinii/headless-authentication-service\n  The above command sets the repository from which to get the container of interest.   NOTE: Once this chart is deployed, it is not possible to change the application's access credentials, such as usernames or passwords, using Helm. To change these application credentials after deployment, delete any persistent volumes (PVs) used by the chart and re-deploy it, or use the application's built-in administrative tools if available.  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,     $ helm install my-release -f values.yaml simfinii/headless-authentication-service\n    Tip : You can use the default   values.yaml  Troubleshooting  Find more information about how to deal with common errors related to Bitnami's Helm charts in   this troubleshooting guide .  Upgrading  To 0.0.1  Base chart version   License  Copyright © 2022 Simfinii  Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at   http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.   Autogenerated from chart metadata using   helm-docs v1.11.0  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":106,"path":107,"dir":90,"title":108,"description":109,"keywords":110,"body":128},"content:3.engineering:service-overview.md","/engineering/service-overview","Service Overview","Simifinii: Authentication Microservice Design Document",[97,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],"Motivation","Potential Solutions","Assumptions","Constraints/Limitations","Hard & Soft Requirements","Algorithm & Pseudocode For Main Components","SLA & Service Guarantees","Data Definition, Schema Design, Persistence Requirements","Caching Requirements","Capacity Planning","Performance Requirements","Security","API/gRPC Endpoints","Rollout Plan","Test Plan","Appendix","Review Sign-Off","   Simifinii: Authentication Microservice Design Document   Date : 2021-11-05   Project : Simifinii: Authentication Microservice   Audience : Engineering   Authors : Srikar, Yoan Yomba   Emails :   yoanyombapro@gmail.com   Reply To :   yoanyombapro@gmail.com  Introduction  The primary goal of this service is to serve as the primary means of authentication within the backend system.  Motivation  Authentication is an extremely important aspect of an any platform due in part to the fact that data protection at the user level must be enforced as well as access level permissions. Authentication however, in a distributed system provides more complexities. In monolithic applications, authentication and authorization can be performed via sessions. However, in a distributed system, since multiple instances of a service can be deployed at one time, enforcing user requests to the originating session instance (sticky sessions) isn’t viable and introduces a ton of operational overhead.  With this in mind, we at the simifinii aim to implement our authorization scheme via 2 sets of services via json web tokens (JWT). We also make use of a distributed cache for session storage which ensures that we don’t need to maintain stickiness across instances of a server. The authentication framework developed by us consists of 2 service instances. One is a stateful instance which utilizes the open-sourced keratin-authn microservice and interfaces with either a postgres or mysql database.The second instance is a headless authentication service which is stateless and serves as an interface through which the keratin-authn service can be interacted with.  The rest of this design document provides further details pertinent to this implementation.  Potential Solutions  Proposed above is a solution that utilizes 2 sets of services. One which serves as a stateless headless service and interacts with the keratin authn stateful service via APIs. The reason for this design decision is to first abstract the private and public api’s keratin authn exposes from the context of other consuming services. Without this, all calling services would have to be aware of public and private endpoints as well as properly set headers. Through the headless authentication service, these can automatically be set in requests prior to transit.  The reason we picked the open sourced keratin authn service was partly due to the fact that we needed the service to completely own all account credential data completely removing this necessity from other microservices. Additionally we loved its reliance on SQL databases for long term account/credentials data, and its ease of integration into our backend system.  In summary, the API that the authentication handler service provides and its ability to interface with keratin-authn eases the operational overhead all consuming services must absorb.  (EXPERIMENTAL : Implement After MVP Launch)  It is important to note one very important point. The headless authentication service withholds a go-routine which continuously polls the message queue’s “record update” channel. The messages in such queues follow the following rubric. They must contain the name of the respective grpc api and the required request field parameters. The go-routine routinely polls the message queue, performs the operation defined by the message via a set of retries and on failures (internal server error) … puts the message back onto the queue.  Assumptions  No assumptions are currently present. However, this section is prone to change especially as the service level requirements change.  Constraints/Limitations  These sets of services are only meant to provide an authentication mechanism and retain a single source of truth of the state of an account throughout the backend system. Account state updates must propagate to this service via distributed transactions. Consistency holds the highest priority when dealing with account record state within the system.\nSystem Design/Architecture\nSystem Diagram & Flowchart    Figure 1: Authentication Handler Service    Figure 2: Authentication Service (Keratin Authn)    Figure 3: Service Level Interactions  Hard & Soft Requirements  This is a crucial part of the system. As a result, if either instance goes down, users will inherently be unable to sign into the system, create new accounts, and account records could be in an inconsistent state across the backend. In summary, this would cause an outage.  Since consistency is key to ensuring the system behaves as expected, we must build in resiliency through asynchronous messaging in hopes of enabling failed requests to eventually be processed (eventual consistency). This concept of eventual consistency if truly only relevant for failed requests attempting to modify account record states. In cases of failed sign up/sign in requests due to service unavailability, we must provide the proper alert logic (sev 1 … etc) so that the on-call can fix the problem at hand.  It is important to note that we prioritize data consistency across the backend since lack thereof can have serious implications. Lack of access to the system as a result of complete failure for us although ill-advised can be rectified assuming the on-call tends to the failure in a timely manner. This however entails that granular logs are emitted, the proper set of metrics are defined, critical logic paths are instrumented, and proper monitoring is set in place.  Remember, there is no such thing as “over instrumentation”.  Algorithm & Pseudocode For Main Components  Authentication  The authentication scheme makes use of JWT tokens for authentication. In order for a user to be properly authenticated, he/she must first create an account then go through the account sign up flow. From the context of the frontend, the registration flow varies across user types. However, in the context of the backend, all accounts have similar registration flow and exact sign up flow.  Registration  Registration is a multi-step process that begins at the client and involves a multitude of services. The below step outline this process   Through a form on the frontend, we collect a user’s credentials and other required pieces of data & perform field validation  Send the request to the Api-Gateway\n   Api-Gateway obtains from the request object the email and password fields and performs a series of calls to the headless authentication\nservice. The first endpoint called is the “password score” to ensure the request password is strong enough.\n   On failure, we return an error to the client stating the provided password is too weak.  On success, we proceed to the next call  Api-Gateway invokes the “create account” api of the authentication handler service.\n   Headless Authentication service performs a create account call via the authentication service and returns the id of the created account to\nthe Api-Gateway.  On failure, we return an error to the client stating that the provided credentials are invalid or there is an outage.  On success, we perform the next set of operations  With the returned ID, the Api-Gateway calls a set of backend services explicitly or through msg queues to create records from their context\nand any additional operation such as sending out email, … etc.\n   If this fails, the gateway needs to be smart about retrying this operation. ensuring fields are properly validated before the request is\nsent from the frontend to the gateway can limit this from happening.  NOTE: these set of operations should be performed asynchronously via messages and a queue  Upon successful creation of the account, we send the successful response to the frontend  The only difference between the set of service level interactions in the backend between merchant and shopper registration is the manner in which services interact upon a successful response is obtained from the authentication handler service after the “create account” call.  Login  When a user logs in, they establish two sessions: one with the frontend which expires periodically, and another with the backend that can be used to refresh the app session. These are called the access token and refresh token, respectively.  During login, the backend works to ensure that users may not enumerate users in your system. This means it will not declare which field was incorrect , but instead fails with a generic credentials error. The below set of steps outline the process by which this logic flow is carried out.   Through a form in the frontend, we collect user credentials and validate all fields  Send the information to the Api-Gateway\n   Api-Gateway calls the authentication handler service via the “login” grpc endpoint which calls the authentication service to ensure it\nwithholds the record of interest\n   On failure, we return an error to the frontend immediately  On success, we obtain a JWT token and perform the following set of operations  We condition on account type and call a set of backend services to create a response that is\nnecessary for the ensuing UI page that follows successful logins\n   NOTE: Because we will be calling numerous services and schema stitch their responses, we are ok with partial failures. However, we must\nensure we provide the proper retry logic in place in cases of failure and emit the right set of metrics.  On failure of all calls, we should raise a sev 1 incident and return an error to the client  On success, we return the data to the frontend.  Frontend obtains positive response from Api-Gateway and stores the JWT token in the browser cache which it can leverage on ensuing requests\nby placing the token in the request header  Logout  Most of our users will probably disappear when they close the application, but sometimes they will want to cleanly log out. The backend will take care of cleaning up its sessions (the access token and refresh token). The below set of steps outline out log out flow.   The Api-Gateway is called with the current user’s account id when a user clicks the logout button.  Api-Gateway by use of the account ID calls the headless authentication service via the “logout” grpc endpoint which invoked the “logout” http\nendpoint of the keratin-authn microservice.\n   On success, the token within the session established with the backend for the account is revoked and the session is terminated.  On failure, we emit metrics, and continue to the next set of calls  Api-Gateway call any other cleanup operations against the APIs of other microservices\n   NOTE: perform this via message queues. Asynchronous operation is useful in this scenario  Api-Gateway returns a success response to the frontend  Frontend removes the JWT token from browser cache.  Password Reset/Change  The password registration process is a 2 phased endeavor. It requires the account owner to first request a password which will result in the account owner obtaining an email with a link to a password reset page where the password will be reset   Through a form on the frontend, a user will provide their email field which will be validated prior to the Api-Gateway being invoked  Api-Gateway obtains the email field from the request body and call the headless authentication service via the “password reset” grpc endpoint\n   Headless Authentication service invokes the “/password/reset” http endpoint of the authentication service.\n   Authentication service will post a webhook to the application password reset url with a request body containing the account ID and the\ngenerated jwt token.\n   NOTE: This webhook should be the url of the email service which would send an email containing the data to the user’s email and a\nlink to a custom password reset form. APP_PASSWORD_RESET_URL environment variable must be set  Authentication service will return a response code which will tell the Api-Gateway whether an error occurred or not.  Response code is used to send message to the frontend  In the second phase, once the user obtains the password reset email and clicks on the link forwarding him/her to the password reset form, we perform the following set of operations.   Through the frontend, the user inputs his/her new password. Fields are validated and then a request is sent to the Api-Gateway. Prior to the\nrequest being sent, the JWT token which was sent to the user’s email is attached to the request header  Api-Gateway calls the authentication handler service’s “password score” grpc endpoint first.\n   On failure, re-prompt the user to input a stronger password  On success, perform the next set of operations  Api-Gateway invokes “update account password” grpc endpoint which calls the authentication service via “/password” http endpoint with the new\npassword and the JWT token.\n   On failure, return the error message to the client  On success, perform the next set of operations  Api-Gateway calls and updates other dependent services that must be aware of the new password such as sending a confirmation email that the\npassword was successfully changed, … etc and returns the status of the prior operation to the frontend.\n   NOTE: these set of service level interactions should ideally be performed via message queue.  Record Update  Account record modifications are expected and must occur in a fault-tolerant manner. The below set of steps outline the steps set in place in order to mitigate inconsistencies throughout the backend on operation failures especially since the state of the record present in the authentication service (keratin-authn) is the single source of truth.  Operations  Any operation which updates the state of an account record (lock/unlock, update, archive,...etc) may fail and as a result we must ensure the proper limitations are set in place.  Whenever a record state update is attempted through the invocation of a respective grpc endpoint, the calling service must first perform the call and check the response. The following options are available to the caller depending on the status of the operation   Failure\n   On failure (after numerous retries and internal server error), the calling service has 2 choices.\n   Either the calling service fails the current overarching operation entirely  In cases when eventual consistency is acceptable, the calling service can place a message on the “update channel” of the message queue\nwhich the authentication handler service is subscribed to and is to handle at some point later on.  SLA & Service Guarantees  Fault tolerance and recovery requirements are defined above.  Data Definition, Schema Design, Persistence Requirements  The data model is currently very simple. The authentication service (keratin-authn) only stores the following fields   Record ID  Username/Email  Password  Locked (Tells whether the account is locked)  Deleted (Tells whether the account has been archived)  Caching Requirements  Currently, there are no caching requirements as the headless authentication service is stateless and the authentication handler service only makes use of a key value store for session storage.  Capacity Planning  Both services will generate logs, metrics, and traces. However, there isn’t an expectation that the service will generate an abnormal amount of data. We will leverage datadog as our metrics, log, and trace store. The retention policy will be 1 month.  Performance Requirements  Authentication Handler Service & Authentication Service (keratin-authn)   Expected throughput: 50K QPS  Expected Latencies: \u003C 9ms  In order to ensure we have the utmost throughput and the minimal service level latencies, we following points must be enforced throughout development.\nA gRPC channel must be reused when making gRPC calls since this allows calls to be multiplexed through an existing HTTP/2 connection. If a new channel is created for each gRPC call then we can have a significant latency overhead since each call will require multiple round trips between the client and the server to create the HTTP/2 connection:   Opening a socket  Establishing TCP connection  Negotiating TLS  Starting HTTP/2 Connection  Making The gRPC call.  Channels on the contrary are safe to share and reuse between gRPC calls since gRPC clients are created with channels, are lightweight and don't require much caching. Multiple gRPC clients can be generated from a channel and such channels and clients can be used by multiple threads.  Please reference grpc performance best practices throughout development to optimize performance.  Security  The authentication scheme makes use of emails which is considered personally identifiable information (PII/PCI). As a result, security is crucial. The proper origin headers must be set which is enforced by the keratin-authn service as well as communication via https. To further enhance security, all API traffic must be encrypted with TLS and SSL internally.  Please reference security best practices throughout development to better secure the backend system.  ##Multi Region Story\nAs of yet, there are no regional special requirements for this service.  API/gRPC Endpoints  Please reference the grpc endpoint documentation throughout development.  Rollout Plan  Rollout Phases  Rollout phases will be determined later.\nA/B Tests\nA/B Tests will be determined later.  Data Migration  No data migration should occur however in the context of the authentication service, schema migrations should occur.  Test Plan  Testing is crucial and will be prioritized throughout development. Unit tests will be of high importance. We mandata that each service has at least 85% unit test coverage. As for testing dependencies through integration and load tests, we will perform this in four phases.   Phase 1: mock dependency response & test logic  Phase 2: spin up dependencies in docker containers & perform gCurl against grpc endpoints & ensure expected response is obtained  Phase 3: spin up dependencies in local & sandboxed kubernetes cluster & perform gCurl against grpc endpoints & ensure expected response is obtained.  Phase 4: through use of vegeta load testing tool we will perform load tests against services running in kubernetes sandbox environment  The final stage of testing will apply chaos testing. We will enable certain environment variables which will fail some requests based on some preset probability. With this, we will perform load tests once again and ensure the proper set of metrics are emitted and the service is behaving as expected.   NOTE : it is important all these can be performed both locally and within our CI/CD workflow.  Appendix  SSL & TLS Examples  Review Sign-Off  Team Lead/Manager - sign off by Srikar, Yoan Yomba\nSponsor - sign off by Yoan Yomba",{"id":130,"path":131,"dir":90,"title":132,"description":7,"keywords":133,"body":137},"content:3.engineering:service.md","/engineering/service","Protocol Documentation",[134,135,136],"Table of Contents","api/v1/headless_auth_service.proto","Scalar Value Types","  Protocol Documentation    Table of Contents    api/v1/headless_auth_service.proto    Account   ChangePasswordRequest   CreateUserAccountRequest   CreateUserAccountResponse   DeleteUserAccountRequest   DeleteUserAccountResponse   EmptyResponse   GetUserAccountRequest   GetUserAccountResponse   LockUserAccountRequest   LockUserAccountResponse   LoginUserRequest   LoginUserResponse   LogoutUserRequest   LogoutUserResponse   RequestPasswordChangeRequest   ResetPasswordRequest   ResetUrlRequest   ServiceHealthRequest   ServiceHealthResponse   TokenResponse   UnlockUserAccountRequest   UnlockUserAccountResponse   UpdateUserAccountEmailRequest   UpdateUserAccountEmailResponse   authsvc   Scalar Value Types     Top  api/v1/headless_auth_service.proto    Account  Account is an AuthN user account     Field  Type  Label  Description    id   uint32     username   string     locked   bool     deleted   bool      ChangePasswordRequest     Field  Type  Label  Description    newPassword   string     currentPassword   string      CreateUserAccountRequest  CreateUserAccountRequest: Represents the request object invoked against the\nuser service to create a user account     Field  Type  Label  Description    email   string     password   string      CreateUserAccountResponse  CreateUserAccountResponse: Represents the response object returned as a\nproduct of the create user account endpoint being hit     Field  Type  Label  Description    id   uint32     code   uint32     err   string      DeleteUserAccountRequest  DeleteUserAccountRequest: Represents the request object invoked against the\nuser service to delete a user account     Field  Type  Label  Description    id   uint32      DeleteUserAccountResponse  DeleteUserAccountResponse: Represents the response object returned as a\nproduct of the delete user account email endpoint being hit     Field  Type  Label  Description    code   uint32     err   string      EmptyResponse    GetUserAccountRequest  GetUserAccountRequest: Represents the request object invoked against the user\nservice to get a user account     Field  Type  Label  Description    id   uint32      GetUserAccountResponse  GetUserAccountResponse: Represents the response object returned as a product\nof the get user account endpoint being hit     Field  Type  Label  Description    account   Account     code   uint32     err   string      LockUserAccountRequest  LockUserAccountRequest: Represents the request object invoked against the\nuser service to lock a user account     Field  Type  Label  Description    id   uint32      LockUserAccountResponse  LockUserAccountResponse: Represents the response object returned as a product\nof the lock user account endpoint being hit     Field  Type  Label  Description    code   uint32     err   string      LoginUserRequest  LoginUserRequest: Represents the request object invoked against the user\nservice to log in a user account     Field  Type  Label  Description    email   string     password   string      LoginUserResponse  LoginUserResponse: Represents the response object returned as a product\nof the log in endpoint being hit     Field  Type  Label  Description    token   string     code   uint32     err   string      LogoutUserRequest  LogoutUserRequest: Represents the request object invoked against the user\nservice to log out a user account     Field  Type  Label  Description    id   uint32      LogoutUserResponse  LogoutUserResponse: Represents the response object returned as a product\nof the log out endpoint being hit     Field  Type  Label  Description    code   uint32     err   string      RequestPasswordChangeRequest     Field  Type  Label  Description    email   string      ResetPasswordRequest     Field  Type  Label  Description    password   string     token   string      ResetUrlRequest     Field  Type  Label  Description    account_id   string     token   string      ServiceHealthRequest  ServiceHealthRequest: Represents a request object to obtain the service's\nhealth    ServiceHealthResponse  ServiceHealthResponse: Represents the response object returned as a product\nof the the service health rpc call     Field  Type  Label  Description    status   string      TokenResponse     Field  Type  Label  Description    token   string     code   uint32     err   string      UnlockUserAccountRequest  UnlockUserAccountRequest: Represents the request object invoked against the\nuser service to unlock a user account     Field  Type  Label  Description    id   uint32      UnlockUserAccountResponse  UnlockUserAccountResponse: Represents the response object returned as a\nproduct of the unlock user account endpoint being hit     Field  Type  Label  Description    code   uint32     err   string      UpdateUserAccountEmailRequest  UpdateUserAccountEmailRequest: Represents the request object invoked against\nthe user service to update a user account's email parameter     Field  Type  Label  Description    id   uint32     email   string      UpdateUserAccountEmailResponse  UpdateUserAccountEmailResponse: Represents the response object returned as a\nproduct of the update user account email endpoint being hit     Field  Type  Label  Description    code   uint32     err   string      authsvc  authsvc: Represents the Headless Authentication service of the simifinii\nplatform.  The authsvc service serves as the sole store of all user specific credentials     Method Name  Request Type  Response Type  Description    LoginUserAccount   LoginUserRequest   LoginUserResponse  LoginUserAccount: authenticates a user account based on provided credentials against the authentication service.   LogoutUserAccount   LogoutUserRequest   LogoutUserResponse  LogoutUserAccount: logs user account out of the system from the context of the authentication service   CreateUserAccount   CreateUserAccountRequest   CreateUserAccountResponse  CreateUserAccount: creates a new user account in the authentication service   UpdateUserAccountEmail   UpdateUserAccountEmailRequest   UpdateUserAccountEmailResponse  UpdateUserAccountEmail: Updates the email field of the user account from the context of the authentication service   DeleteUserAccount   DeleteUserAccountRequest   DeleteUserAccountResponse  DeleteUserAccount: Deletes user account in the authentication service   UnlockUserAccount   UnlockUserAccountRequest   UnlockUserAccountResponse  UnLockUserAccount: Unlocks a user account from the context of the authentication service   LockUserAccount   LockUserAccountRequest   LockUserAccountResponse  LockUserAccount: Locks a user account from the context of the authentication service   GetUserAccount   GetUserAccountRequest   GetUserAccountResponse  GetUserAccount: Gets a user account in the authentication service   Health   ServiceHealthRequest   ServiceHealthResponse  Health: Attempts to obtain service health   Ready   ServiceHealthRequest   ServiceHealthResponse  Health: Attempts to obtain service readiness status   RequestPasswordChange   RequestPasswordChangeRequest   EmptyResponse    ResetPassword   ResetPasswordRequest   TokenResponse    ChangePassword   ChangePasswordRequest   TokenResponse    ResetUrl   ResetUrlRequest   EmptyResponse   Scalar Value Types     .proto Type  Notes  C++  Java  Python  Go  C#  PHP  Ruby      double   double  double  float  float64  double  float  Float     float   float  float  float  float32  float  float  Float     int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.  int32  int  int  int32  int  integer  Bignum or Fixnum (as required)     int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.  int64  long  int/long  int64  long  integer/string  Bignum     uint32  Uses variable-length encoding.  uint32  int  int/long  uint32  uint  integer  Bignum or Fixnum (as required)     uint64  Uses variable-length encoding.  uint64  long  int/long  uint64  ulong  integer/string  Bignum or Fixnum (as required)     sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.  int32  int  int  int32  int  integer  Bignum or Fixnum (as required)     sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.  int64  long  int/long  int64  long  integer/string  Bignum     fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28.  uint32  int  int  uint32  uint  integer  Bignum or Fixnum (as required)     fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56.  uint64  long  int/long  uint64  ulong  integer/string  Bignum     sfixed32  Always four bytes.  int32  int  int  int32  int  integer  Bignum or Fixnum (as required)     sfixed64  Always eight bytes.  int64  long  int/long  int64  long  integer/string  Bignum     bool   bool  boolean  boolean  bool  bool  boolean  TrueClass/FalseClass     string  A string must always contain UTF-8 encoded or 7-bit ASCII text.  string  String  str/unicode  string  string  string  String (UTF-8)     bytes  May contain any arbitrary sequence of bytes.  string  ByteString  str   byte  ByteString  string  String (ASCII-8BIT)",{"id":139,"path":140,"dir":90,"title":141,"description":7,"keywords":142,"body":144},"content:3.engineering:setup.md","/engineering/setup","Setup",[143],"Running The Service Locally","  Running The Service Locally   This document aims to serve as a guide to get this service and its dependencies up and running. If you haven't yet, it is imperative\nyou follow the steps provided on this   minikube installation guide  prior to\nexecuting any of the below operations.  Running Service Locally With Live Reload During Development  To run the service and it's dependencies with live reload enabled to expedite development, open the terminal and run the following command     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   start-local-live\n  This spins up the service and its dependencies as part of a docker-compose workflow. If you do not want to see the service logs and would rather\nopt to run the service in the background ... run   make start-local  instead  Running Minikube locally  In order to start a local minikube cluster perform the following     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   mk-start\n  Deploying Your Changes To Minikube Locally  To deploy your local changes in a container in the minikube cluster, run the below operations. It builds and containerizes your local changes then\nupdates the docker registry at which the container is stored from local to that of minikube. After, it deploys the helm charts referencing\nthis container as well as dependent services into the cluster. Lastly, it opens, a tab with a k8's dashboard shedding light on the state of the\ndeployment, services, pods, ...etc     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   mk-launch-new\n  If you want to deploy with the docker container present on dockerhub instead of local changes, run   make mk-launch  instead.  Stopping And Deleting Minikube Cluster  To stop minikube cluster run     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   mk-stop\n  To delete the minikube cluster run     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   mk-delete\n  Running Tests Locally  Unit Tests  To run service level unit tests run     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   test\n  This will spin up the service with your changes in a container as well as dependent services as part of a docker compose workflow and\nrun a set of tests against them all  Integration Tests  To run integration tests, make sure you have a minikube cluster up and running as well as have deployed the set of dependent helm charts. For\nreference, utilize the following commands to execute a suite of E2E tests against the service in the cluster.     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   integration-test\n  Suite Of Tests  To run all tests execute the following set of commands     cd   ~/go/src/github.com/SolomonAIEngineering/backend-headless-authentication-service\n   make   test\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",1701363686325]